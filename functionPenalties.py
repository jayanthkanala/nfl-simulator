# -*- coding: utf-8 -*-
"""NFLGameSimulator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XoVs9O1Txo5wDwedOOim6g5i7nXCfOq_

NFL GAME SIMULATOR FUNCTIONS
"""

!pip install nfl-data-py

import nfl_data_py as nfl

"""Create Data Frame"""

import pandas as pd
pd.options.display.max_columns = None
nfls = nfl.import_pbp_data([2023], downcast=True, cache=False, alt_path=None)
team_dict = {}
for team in nfls['home_team']:
    if team not in team_dict:
        team_dict[team] = None

"""Create dictionary for teams (is not used within functions but could be useful for other sections)"""

from scipy.stats import skew
import numpy as np
team_dict = {}
for team in nfls['home_team']:
    if team not in team_dict:
        team_dict[team] = None
print(team_dict)

def play_percent(team, play_type, offdef):
  team_df = nfls[nfls[offdef] == team] #Filter data frame based on offense team
  count = 0
  total = 0
  for i in team_df[play_type]:
    if i == 1:
      count += 1
      total += 1
    else:
      total += 1
  percent = count / total
  return percent

def average_yards(play_type, team, offdef): #Avg yards and standard devaition for a specified play type
  type_df = nfls[(nfls[play_type] == 1) & (nfls[offdef] == team)]
  total = 0
  count = 0
  for i in type_df['yards_gained']:
    count += i
    total += 1
  standard_deviation = np.std(type_df['yards_gained'])
  skewness = skew(type_df['yards_gained'])
  average_yards = count / total
  return average_yards, standard_deviation, skewness

def kickoffs(team, kickrec): #Touchback pct
  type_df = nfls[(nfls["kickoff_attempt"] == 1) & (nfls[kickrec] == team)]
  total = 0
  count = 0
  for i in type_df['touchback']:
    count += i
    total += 1
  touchback_pct = count / total
  return touchback_pct


def completion_percentage(team, offdef, play_type = "complete_pass"): #Completion percentage (play_type variable is added to comply with avg func)
  type_df = nfls[(nfls["pass_attempt"] == 1) & (nfls[offdef] == team)]
  total = 0
  count = 0
  for i in type_df[play_type]:
    count += i
    total += 1
  completion_pct = count / total
  return completion_pct

def average_return_yards(team, kickpunt, kickrec, play_type = "return_yards"): #Average return yards for punting or kicking team or defensive team
  type_df = nfls[(nfls[kickpunt] == 1) & (nfls[kickrec] == team)]
  total = 0
  count = 0
  for i in type_df[play_type]:
    count += i
    total += 1
  avg_return = count / total
  sd = np.std(type_df[play_type])
  skewness = skew(type_df[play_type])
  return avg_return, sd, skewness

"""Average between offense and defense"""

#Find average yards, play percents, and completion percentages by averaging offense and defense stats

import random
import numpy as np
from scipy.stats import skewnorm #Rushing and passing are right skewed:

def average_off_def(offense, defense, play_type, funcname): #Averages offense with defense based on play_type and function name
  if funcname == average_yards:
    off_mean = funcname(team = offense, play_type = play_type, offdef = "posteam")[0] #Use 0 index in case of multiple returns in function
    def_mean = funcname(team = defense, play_type = play_type, offdef = "defteam")[0]
    off_sd = funcname(team = offense, play_type = play_type, offdef = "posteam")[1] #Use 0 index in case of multiple returns in function
    def_sd = funcname(team = defense, play_type = play_type, offdef = "defteam")[1]
    off_skew = funcname(team = offense, play_type = play_type, offdef = "posteam")[2] #Use 0 index in case of multiple returns in function
    def_skew = funcname(team = defense, play_type = play_type, offdef = "defteam")[2]
    avg_yards = (off_mean + def_mean) / 2
    avg_sd = (off_sd + def_sd) / 2
    avg_skew = (off_skew + def_skew) / 2
    return avg_yards, avg_sd, avg_skew
  else:
    off_mean = funcname(team = offense, play_type = play_type, offdef = "posteam")
    def_mean = funcname(team = defense, play_type = play_type, offdef = "defteam")
    avg = (off_mean + def_mean) / 2
    return avg

rush_avg = average_off_def(offense = "BUF", defense = "KC", play_type = "rush_attempt", funcname = average_yards)[0]
complete = average_off_def(offense = "BUF", defense = "KC", play_type = "complete_pass", funcname = completion_percentage)
pass_att_pct = average_off_def(offense = "BUF", defense = "KC", play_type = "pass_attempt", funcname = play_percent)

print(f"When Buffalo is on offense, and Kansas City is on defense, the mean yards on a rush attempt is {rush_avg}")
print(f"When Buffalo is on offense, and Kansas City is on defense, Buffalo's assumed completion percentage is {complete}")
print(f"When Buffalo is on offense, and Kansas City is on defense, Buffalo is assumed to pass the ball {pass_att_pct} of the time")

"""Using skew distribution for weighted random yards and weighted random time"""

#Defines random yards function based on right-skew distribution
#We can do more testing on data to get exact skew values for rush and pass

def random_yards_time(mean, sd, skewness):
    rand_yards_time = skewnorm.rvs(skewness, loc=mean, scale=sd, size=1)
    return rand_yards_time

mean = average_off_def(offense = "BUF", defense = "KC", play_type = "complete_pass", funcname = average_yards)[0]
sd = average_off_def(offense = "BUF", defense = "KC", play_type = "complete_pass", funcname = average_yards)[1]

buf_yards = random_yards_time(mean, sd, skewness = 2) #75 is a placeholder
print(f"Buffalo completes a pass for {(buf_yards[0]):.0f} yards!")

"""Dealing with penalties"""

def percent_chance_penalty(play_type): #Assume penalty type is random (use entire nfl).
  new = nfls[nfls[play_type] == 1]
  count = 0
  total = 0
  for i in new["penalty"]:
    count += i
    total += 1
  chance = count / total
  return chance

print(percent_chance_penalty("rush_attempt"))

"""Outputting a random outcome based on normalized weighted probabilities

"""

#Demo functions for defining probabilities of each outcome when a team is on offense.
#Also chooses random outcome based on normalized weighted probabilities

def define_probs(offense, defense):
  outcomes = ["rush_attempt", "pass_attempt", "sack"]
  probs = []
  for outcome in range(len(outcomes)):
    prob = average_off_def(offense = offense, defense = defense, play_type = outcomes[outcome], funcname = play_percent)
    probs.append(prob)
  return probs

probs = define_probs("BUF", "KC") #Use Buffalo and KC


def normalize_probs(probs):
  total = 0
  normalized_probs = []
  for p in probs:
    total += p
  for p in probs:
    normal_prob = p / total
    normalized_probs.append(normal_prob)
  return normalized_probs

norm_probs = normalize_probs(probs) #Defines normalized probs list

def choose_outcome(norm_probs):
  outcomes = ["rush_attempt", "pass_attempt", "sack"]
  choice = random.choices(outcomes, weights=norm_probs, k=1)
  return choice

print(choose_outcome(norm_probs)) #Based on this outcome we can apply the correct function(s) subsequently

"""Game Loop (Outputs Score)"""

def switch_sides(offense, defense):
  return defense, offense

def game(homeTeam, awayTeam):
    quarter = 1
    down = 1
    time = 0
    currentPosition = 25
    firstDownLine = 10
    endZone = 100
    homeScore = 0
    awayScore = 0
    offense = homeTeam
    defense = awayTeam
    offensive_flags = offensive_pens()
    defensive_flags = defensive_pens()
    special_flags = special_teams_pens()
    while time <= 60*60:

      probs = define_probs(offense, defense)
      norm_probs = normalize_probs(probs)
      outcome = choose_outcome(norm_probs)

      if outcome[0] == "pass_attempt":
        results = ["complete", "incomplete"]
        complete_pct = average_off_def(offense, defense, play_type = "complete_pass", funcname = completion_percentage)
        weights_pass = [complete_pct, 1-complete_pct]
        pass_result = random.choices(results, weights = weights_pass, k =1)
        pen_chance = percent_chance_penalty("pass_attempt")
        flag = ["flag", "no flag"]
        weights_flag = [pen_chance, 1-pen_chance]
        flag_or_not = random.choices(flag, weights = weights_flag, k =1)
        if pass_result[0] == "complete" and flag_or_not[0] != "flag":
          pass_mean = average_off_def(offense, defense, play_type = "complete_pass", funcname = average_yards)[0]
          pass_sd = average_off_def(offense, defense, play_type = "complete_pass", funcname = average_yards)[1]
          pass_skew = average_off_def(offense, defense, play_type = "complete_pass", funcname = average_yards)[2]
          yards = random_yards_time(mean = pass_mean, sd = pass_sd, skewness = pass_skew)
          mean_time, sd_time, skew_time = avg_time("complete_pass")
          time_elap = random_yards_time(mean_time, sd_time, skew_time)
          time += time_elap[0]
          print(f"{offense} completes a pass for {yards[0]:.0f} yards.")
          if yards[0] > 0:
            currentPosition += yards[0]
          else:
            currentPosition -= yards
          if yards[0] > firstDownLine:
            down = 1
          else:
            if yards[0] > 0:
              firstDownLine -= yards[0]
              down += 1
            else:
              firstDownLine += yards[0]
              down +=1
          if currentPosition >= endZone:
            if offense == homeTeam:
              homeScore += 7
            else:
              awayScore += 7
            print(f"{offense} scores a touchdown!")
            currentPosition = 25
            down = 1
            offense, defense = switch_sides(offense, defense)
        elif pass_result[0] == "incomplete_pass" and flag_or_not[0] != "flag":
          mean_time, sd_time, skew_time = avg_time("incomplete_pass")
          time_elap = random_yards_time(mean_time, sd_time, skew_time)
          time += time_elap[0]
          down += 1
          print(f"{offense}'s pass falls incomplete!")
        elif flag_or_not[0] == "flag":
          rand_penalty = random_penalty("pass_attempt")
          yards = flag_yards(rand_penalty, "pass_attempt")
          if rand_penalty in offensive_flags:
            print(f"{rand_penalty} on {offense}! {offense} moves back {yards:.0f} yards!")
            currentPosition -= yards
            time += avg_pen_time(rand_penalty)[0]
          elif rand_penalty in defensive_flags:
            print(f"{rand_penalty} on {defense}! {defense} moves back {yards:.0f} yards!")
            curentPosition += yards
            time += avg_pen_time(rand_penalty)[0]
            if yards > firstDownLine:
              down = 1
          else:
            off_def = ["offense", "defense"]
            weights_off_def = [0.5, 0.5]
            off_def_flag = random.choices(off_def, weights_off_def, k=1)
            if off_def_flag[0] == "offense":
              print(f"{rand_penalty} on {offense}! {offense} moves back {yards:.0f} yards!")
              currentPosition -= yards
              time += avg_pen_time(rand_penalty)[0]
            else:
              print(f"{rand_penalty} on {defense}! {defense} moves back {yards:.0f} yards!")
              curentPosition += yards
              time += avg_pen_time(rand_penalty)[0]
              if yards > firstDownLine:
                down = 1

      elif outcome[0] == "rush_attempt":
          rush_mean = average_off_def(offense, defense, play_type = "rush_attempt", funcname = average_yards)[0]
          rush_sd = average_off_def(offense, defense, play_type = "rush_attempt", funcname = average_yards)[1]
          rush_skew = average_off_def(offense, defense, play_type = "rush_attempt", funcname = average_yards)[2]
          pen_chance = percent_chance_penalty("rush_attempt")
          flag = ["flag", "no flag"]
          weights_flag = [pen_chance, 1-pen_chance]
          flag_or_not = random.choices(flag, weights = weights_flag, k =1)
          if flag_or_not[0] == "no flag":
            yards = random_yards_time(mean = rush_mean, sd = rush_sd, skewness = rush_skew)
            mean_time, sd_time, skew_time = avg_time("rush_attempt")
            time_elap = random_yards_time(mean_time, sd_time, skew_time)
            time += time_elap[0]
            print(f"{offense} runs the ball for {yards[0]:.0f} yards.")
            if yards[0] > 0:
              currentPosition += yards[0]
            else:
              currentPosition -= yards[0]
            if yards[0] > firstDownLine:
              down = 1
            else:
              if yards[0] > 0:
                firstDownLine -= yards[0]
                down += 1
              else:
                firstDownLine += yards[0]
                down +=1
            if currentPosition >= endZone:
              if offense == homeTeam:
                homeScore += 7
              else:
                awayScore += 7
              print(f"{offense} scores a touchdown!")
              currentPosition = 25
              down = 1
              offense, defense = switch_sides(offense, defense)
          else:
            rand_penalty = random_penalty("rush_attempt")
            yards = flag_yards(rand_penalty, "rush_attempt")
            if rand_penalty in offensive_flags:
              print(f"{rand_penalty} on {offense}! {offense} moves back {yards:.0f} yards!")
              currentPosition -= yards
              time += avg_pen_time(rand_penalty)[0]
            elif rand_penalty in defensive_flags:
              print(f"{rand_penalty} on {defense}! {defense} moves back {yards:.0f} yards!")
              curentPosition += yards
              time += avg_pen_time(rand_penalty)[0]
              if yards > firstDownLine:
                down = 1
            else:
              off_def = ["offense", "defense"]
              weights_off_def = [0.5, 0.5]
              off_def_flag = random.choices(off_def, weights_off_def, k=1)
              if off_def_flag[0] == "offense":
                print(f"{rand_penalty} on {offense}! {offense} moves back {yards:.0f} yards!")
                currentPosition -= yards
                time += avg_pen_time(rand_penalty)[0]
              else:
                print(f"{rand_penalty} on {defense}! {defense} moves back {yards:.0f} yards!")
                curentPosition += yards
                time += avg_pen_time(rand_penalty)[0]
                if yards > firstDownLine:
                  down = 1


      elif outcome[0] == "sack":
          sack_mean = average_off_def(offense, defense, play_type = "sack", funcname = average_yards)[0]
          sack_sd = average_off_def(offense, defense, play_type = "sack", funcname = average_yards)[1]
          sack_skew = average_off_def(offense, defense, play_type = "sack", funcname = average_yards)[2]
          pen_chance = percent_chance_penalty("sack")
          flag = ["flag", "no flag"]
          weights_flag = [pen_chance, 1-pen_chance]
          flag_or_not = random.choices(flag, weights = weights_flag, k =1)
          if flag_or_not[0] == "no flag":
            yards = random_yards_time(mean = sack_mean, sd = sack_sd, skewness = sack_skew)
            {print(f"{defense} sacks {offense} for a loss of {(abs(yards[0])):.0f} yards")}
            mean_time, sd_time, skew_time = avg_time("sack")
            time_elap = random_yards_time(mean_time, sd_time, skew_time)
            time += time_elap[0]
            currentPosition += yards[0]
            firstDownLine += yards[0]
            down += 1
          else:
            rand_penalty = random_penalty("sack")
            yards = flag_yards(rand_penalty, "sack")
            if rand_penalty in offensive_flags:
              print(f"{rand_penalty} on {offense}! {offense} moves back {yards:.0f} yards!")
              currentPosition -= yards
              time += avg_pen_time(rand_penalty)
            elif rand_penalty in defensive_flags:
              print(f"{rand_penalty} on {defense}! {defense} moves back {yards:.0f} yards!")
              curentPosition += yards
              time += avg_pen_time(rand_penalty)[0]
              if yards > firstDownLine:
                down = 1
            else:
              off_def = ["offense", "defense"]
              weights_off_def = [0.5, 0.5]
              off_def_flag = random.choices(off_def, weights_off_def, k=1)
              if off_def_flag[0] == "offense":
                print(f"{rand_penalty} on {offense}! {offense} moves back {yards:.0f} yards!")
                currentPosition -= yards
                time += avg_pen_time(rand_penalty)[0]
              else:
                print(f"{rand_penalty} on {defense}! {defense} moves back {yards:.0f} yards!")
                curentPosition += yards
                time += avg_pen_time(rand_penalty)[0]
                if yards > firstDownLine:
                  down = 1

      if down == 4:
        offense, defense = switch_sides(offense, defense)

    return homeScore, awayScore
homeTeam = input("Enter home team: ")
awayTeam = input("Enter away team: ")
homeScore, awayScore = game(homeTeam, awayTeam)
print(f"Final Score: {homeTeam}: {homeScore}  {awayTeam}: {awayScore}")

def convert_time_to_seconds(time):
    if not time:
      return None #handles None values
    minutes, seconds = time.split(':')
    return int(minutes) * 60 + int(seconds)

def avg_time(play_type):
  time_seconds = []
  for time in nfls["time"]:
    time_seconds.append(convert_time_to_seconds(time))
  nfls["time_seconds"] = time_seconds #New row in the data frame
  nfls_index = nfls.index[nfls[play_type] == 1]
  count = 0
  total = 0
  times = []
  for i in nfls_index:
    if pd.notna(nfls.loc[i, "time_seconds"]) and pd.notna(nfls.loc[i+1, "time_seconds"]):
      play_time = (nfls.loc[i, "time_seconds"]) - (nfls.loc[i+1, "time_seconds"])
      count += play_time
      total += 1
      times.append(play_time)
  avg_time = count / total
  sd = np.std(times)
  skewness = skew(times)
  return avg_time,sd, skewness

avg_time("complete_pass")

"""More Penalty Analysis:
Penalty yards and time is an interesting factor. For penalties of 10 and 15 yards, time will always come off the clock. 5 yard penalties can be pre-play penalties so I'm going to make a check for 5 yard penalties. Also going to install a check for pass interference that will go in the passing section of the game loop. This section also can output a random penalty based on probabilities for any type of play. Based on the penalty a random amount of yards will be assesed based on their average yards. Also semi-manually classified all penalties into offensive, defensive, and special teams penalties.
"""

#Updated penalty check for passing or rushing play
def pen_probs(play_type):
  unique_values = nfls['penalty_type'].unique()
  new = nfls[(nfls[play_type] == 1) & (nfls["penalty"]==1)]
  penalty_frequencies = [0] * len(unique_values)
  penalty_yds = [0] * len(unique_values)
  for i in new.index:
    for k in range(len(unique_values)):
      if unique_values[k] == new.loc[i, "penalty_type"]:
        penalty_frequencies[k] += 1
        penalty_yds[k] += new.loc[i, "penalty_yards"]
  penalty_avgs = []
  for i in range(len(penalty_yds)):
    if penalty_frequencies[i] > 0:
      penalty_avg = penalty_yds[i] / penalty_frequencies[i]
      penalty_avgs.append(penalty_avg)
    else:
      penalty_avg = 0
      penalty_avgs.append(penalty_avg)

  penalty_probs = []
  for i in range(len(penalty_frequencies)):
    penalty_prob = penalty_frequencies[i] / sum(penalty_frequencies)
    penalty_probs.append(penalty_prob)
  return penalty_probs, penalty_avgs

def flag_yards(flag_type, play_type):
  unique_values = nfls['penalty_type'].unique()
  penalty_avgs = pen_probs(play_type)[1]
  avg_flag_yds = 0
  for idx, flag in enumerate(unique_values):
    if flag_type == unique_values[idx]:
      avg_flag_yds = penalty_avgs[idx]
  rounded_yds = round(avg_flag_yds / 5) * 5
  return rounded_yds

penalty_probs, penalty_avgs = pen_probs("rush_attempt")
print(penalty_avgs)
def random_penalty(play_type):
  pen_types = nfls['penalty_type'].unique()
  pen_prob, penalty_avgs = pen_probs(play_type)
  penalty_type = random.choices(pen_types, weights = pen_prob, k =1)
  return penalty_type

print(random_penalty("pass_attempt"))

def avg_pen_time(penalty_type):
  time_seconds = []
  for time in nfls["time"]:
    time_seconds.append(convert_time_to_seconds(time))
  nfls["time_seconds"] = time_seconds #New row in the data frame
  nfls_index = nfls.index[(nfls["penalty"] == 1) & (nfls["penalty_type"] == penalty_type)]
  count = 0
  total = 0
  times = []
  for i in nfls_index:
    if pd.notna(nfls.loc[i, "time_seconds"]) and pd.notna(nfls.loc[i+1, "time_seconds"]):
      play_time = (nfls.loc[i, "time_seconds"]) - (nfls.loc[i+1, "time_seconds"])
      count += play_time
      total += 1
      times.append(play_time)
  if total > 0:
    avg_time = count / total
    sd = np.std(times)
    skewness = skew(times)
  else:
    avg_time = None
    sd = None
    skewness = None
  return avg_time,sd, skewness

avg_pen_time("Defensive Pass Interference")
print(nfls['penalty_type'].unique())

def offensive_pens():
  off_pens = []
  for i in nfls['penalty_type'].unique():
    if (isinstance(i, str) and "Offensive" in i):
      off_pens.append(i)
  other_off_pens = ["False Start", "Illegal Formation", "Ilegal Shift", "Ineligible Downfield Pass", "Intentional Grounding", "Low Block", "Illegal Motion"]
  off_pens.extend(other_off_pens)
  return off_pens

def defensive_pens():
  def_pens = []
  for i in nfls['penalty_type'].unique():
    if (isinstance(i, str) and "Defensive" in i):
      def_pens.append(i)
  other_def_pens = ["Roughing The Passer", "Neutral Zone Infraction"]
  def_pens.extend(other_def_pens)
  return def_pens

def special_teams_pens():
  spec_pens = []
  for i in nfls['penalty_type'].unique():
    if (isinstance(i, str) and (("Kick" in i) or ("Kicker" in i))):
      spec_pens.append(i)
  other_spec_pens = ["Leverage", "Leaping"]
  spec_pens.extend(other_spec_pens)
  return spec_pens

offensive_pens()
print(flag_yards("Offensive Pass Interference", "pass_attempt"))
avg_pen_time("sack")

flag_yards("Offensive Holding", "pass_attempt")